digraph Tree {
node [shape=box, style="filled, rounded", color="black", fontname="helvetica"] ;
edge [fontname="helvetica"] ;
0 [label=<node #0<br/>Vehicles Capacity ≤ 91.0<br/>samples = 100.0%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandTABU_SEARCH>, fillcolor="#fffffe"] ;
1 [label=<node #1<br/>samples = 10.2%<br/>value = [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandTABU_SEARCH>, fillcolor="#e2e539"] ;
0 -> 1 [labeldistance=2.5, labelangle=45, headlabel="True"] ;
2 [label=<node #2<br/>Vehicles Capacity ≤ 184.0<br/>samples = 89.8%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = CHRISTOFIDESandSIMULATED_ANNEALING>, fillcolor="#ffffff"] ;
0 -> 2 [labeldistance=2.5, labelangle=-45, headlabel="False"] ;
3 [label=<node #3<br/>Load Factor ≤ 1.0<br/>samples = 59.9%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = CHRISTOFIDESandSIMULATED_ANNEALING>, fillcolor="#fffffe"] ;
2 -> 3 ;
4 [label=<node #4<br/>Demands ≤ 12.0<br/>samples = 20.2%<br/>value = [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = CHRISTOFIDESandSIMULATED_ANNEALING>, fillcolor="#fcfefb"] ;
3 -> 4 ;
5 [label=<node #5<br/>samples = 10.0%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]<br/>class = PATH_CHEAPEST_ARCandSIMULATED_ANNEALING>, fillcolor="#3c39e5"] ;
4 -> 5 ;
6 [label=<node #6<br/>samples = 10.2%<br/>value = [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = CHRISTOFIDESandSIMULATED_ANNEALING>, fillcolor="#7be539"] ;
4 -> 6 ;
7 [label=<node #7<br/>Load Factor ≤ 2.0<br/>samples = 39.7%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = SAVINGSandGUIDED_LOCAL_SEARCH>, fillcolor="#ffffff"] ;
3 -> 7 ;
8 [label=<node #8<br/>samples = 10.0%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]<br/>class = SAVINGSandGUIDED_LOCAL_SEARCH>, fillcolor="#e539c0"] ;
7 -> 8 ;
9 [label=<node #9<br/>Vehicles Capacity ≤ 156.0<br/>samples = 29.7%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PARALLEL_CHEAPEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#feffff"] ;
7 -> 9 ;
10 [label=<node #10<br/>Vehicles ≤ 4.0<br/>samples = 19.8%<br/>value = [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PARALLEL_CHEAPEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#f7fefd"] ;
9 -> 10 ;
11 [label=<node #11<br/>samples = 9.8%<br/>value = [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = LOCAL_CHEAPEST_INSERTION_and_TABU_SEARCH>, fillcolor="#39e55e"] ;
10 -> 11 ;
12 [label=<node #12<br/>samples = 10.1%<br/>value = [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PARALLEL_CHEAPEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#39e5c5"] ;
10 -> 12 ;
13 [label=<node #13<br/>samples = 9.9%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]<br/>class = SEQUENTIAL_CHEAPEST_INSERTION_and_GREEDY_DESCENT>, fillcolor="#e53958"] ;
9 -> 13 ;
14 [label=<node #14<br/>Distance != 'euclidean'<br/>samples = 29.9%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#fffffe"] ;
2 -> 14 ;
15 [label=<node #15<br/>Vehicles Capacity ≤ 189.0<br/>samples = 22.3%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PATH_MOST_CONSTRAINED_ARCandSIMULATED_ANNEALING>, fillcolor="#fefdff"] ;
14 -> 15 ;
16 [label=<node #16<br/>samples = 7.4%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]<br/>class = PATH_MOST_CONSTRAINED_ARCandSIMULATED_ANNEALING>, fillcolor="#a339e5"] ;
15 -> 16 ;
17 [label=<node #17<br/>Demands ≤ 14.0<br/>samples = 14.9%<br/>value = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#fefaf8"] ;
15 -> 17 ;
18 [label=<node #18<br/>samples = 7.6%<br/>value = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#e58139"] ;
17 -> 18 ;
19 [label=<node #19<br/>samples = 7.3%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PATH_CHEAPEST_ARCandGREEDY_DESCENT>, fillcolor="#399de5"] ;
17 -> 19 ;
20 [label=<node #20<br/>Demands ≤ 14.0<br/>samples = 7.6%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#fefaf8"] ;
14 -> 20 ;
21 [label=<node #21<br/>samples = 2.6%<br/>value = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]<br/>class = BEST_INSERTIONandSIMULATED_ANNEALING>, fillcolor="#e58139"] ;
20 -> 21 ;
22 [label=<node #22<br/>Load Factor ≤ 2.0<br/>samples = 5.0%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]<br/>class = PATH_MOST_CONSTRAINED_ARCandSIMULATED_ANNEALING>, fillcolor="#fdfbfe"] ;
20 -> 22 ;
23 [label=<node #23<br/>samples = 2.5%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]<br/>class = PATH_MOST_CONSTRAINED_ARCandSIMULATED_ANNEALING>, fillcolor="#a339e5"] ;
22 -> 23 ;
24 [label=<node #24<br/>samples = 2.5%<br/>value = [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]<br/>class = PATH_CHEAPEST_ARCandGREEDY_DESCENT>, fillcolor="#399de5"] ;
22 -> 24 ;
}